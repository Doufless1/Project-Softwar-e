Index: MainWindow.xaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Window x:Class=\"Weather_App.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:wpf1=\"clr-namespace:LiveChartsCore.SkiaSharpView.WPF;assembly=LiveChartsCore.SkiaSharpView.WPF\"\r\n        Title=\"Weather App\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height=\"20*\" />\r\n            <RowDefinition Height=\"20*\" />\r\n            <RowDefinition Height=\"60*\" />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width=\"15*\" />\r\n            <ColumnDefinition Width=\"85*\" />\r\n        </Grid.ColumnDefinitions>\r\n        \r\n        <StackPanel Orientation=\"Horizontal\" HorizontalAlignment=\"Right\" VerticalAlignment=\"Top\" Margin=\"0,10,-1300,0\">\r\n            <!-- Battery Text -->\r\n            <TextBlock FontSize=\"14\" FontWeight=\"Bold\" Foreground=\"Black\" Margin=\"0,0,10,0\" \r\n                       VerticalAlignment=\"Center\"\r\n                       Text=\"{Binding SelectedBatteryPercentageText, Mode=OneWay}\" />\r\n\r\n            <!-- Battery Visual Representation -->\r\n            <Border Width=\"100\" Height=\"20\" Background=\"#E0E0E0\" CornerRadius=\"3\" BorderBrush=\"Gray\" BorderThickness=\"1\">\r\n                <Grid>\r\n                    <!-- Battery Fill -->\r\n                    <Rectangle x:Name=\"BatteryLevel\" \r\n                               Width=\"{Binding BatteryWidth, Mode=OneWay}\" \r\n                               Fill=\"{Binding BatteryColor, Mode=OneWay}\" \r\n                               HorizontalAlignment=\"Right\" \r\n                              />\r\n                    <!-- Battery Cap -->\r\n                    <Rectangle Width=\"8\" \r\n                               Fill=\"#555555\" \r\n                               Height=\"12\" \r\n                               HorizontalAlignment=\"Left\" \r\n                               VerticalAlignment=\"Center\" \r\n                               Margin=\"1,0,1,0\" />\r\n                </Grid>\r\n            </Border>\r\n        </StackPanel>\r\n\r\n        \r\n        <!-- Current Location Placeholder -->\r\n        <StackPanel Grid.Row=\"0\" Grid.Column=\"1\" Grid.RowSpan=\"2\" x:Name=\"CurrentLocationBlock\"/>\r\n        \r\n        \r\n        <!-- StackPanel for Locations -->\r\n        <StackPanel Grid.Row=\"0\" Grid.Column=\"0\" Grid.RowSpan=\"3\" x:Name=\"LocationStackPanel\">\r\n        </StackPanel>\r\n        \r\n        <!-- Temperature and Humidity Info -->\r\n        <StackPanel Grid.Row=\"1\" Grid.Column=\"1\">\r\n            <TextBlock>\r\n                <Run Text=\"Current Temperature: \" />\r\n                <Run Text=\"{Binding CurrentTemperature}\" />\r\n            </TextBlock>\r\n            <TextBlock>\r\n                <Run Text=\"Current Humidity: \" />\r\n                <Run Text=\"{Binding CurrentHumidity}\" />\r\n            </TextBlock>\r\n            <TextBlock FontSize = \"16\" FontWeight=\"Bold\">\r\n                <Run Text=\"{Binding SelectedBatteryPercentageText,  Mode=OneWay}\" />\r\n                </TextBlock>\r\n        </StackPanel>\r\n     \r\n        \r\n        <!-- TabControl for Charts -->\r\n        <TabControl Grid.Row=\"2\" Grid.Column=\"1\">\r\n            <!-- Temperature Tab -->\r\n            <TabItem Header=\"Temperature\">\r\n                <TabControl>\r\n                    <TabItem Header=\"Day\">\r\n                        <wpf1:CartesianChart Series=\"{Binding TemperatureDaySeries}\" XAxes=\"{Binding XAxesDay}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Week\">\r\n                        <wpf1:CartesianChart Series=\"{Binding TemperatureWeekSeries}\" XAxes=\"{Binding XAxesWeek}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Month\">\r\n                        <wpf1:CartesianChart Series=\"{Binding TemperatureMonthSeries}\" XAxes=\"{Binding XAxesMonth}\" />\r\n                    </TabItem>\r\n                </TabControl>\r\n            </TabItem>\r\n            \r\n            <!-- Humidity Tab -->\r\n            <TabItem Header=\"Humidity\">\r\n                <TabControl>\r\n                    <TabItem Header=\"Day\">\r\n                        <wpf1:CartesianChart Series=\"{Binding HumidityDaySeries}\" XAxes=\"{Binding XAxesDay}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Week\">\r\n                        <wpf1:CartesianChart Series=\"{Binding HumidityWeekSeries}\" XAxes=\"{Binding XAxesWeek}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Month\">\r\n                        <wpf1:CartesianChart Series=\"{Binding HumidityMonthSeries}\" XAxes=\"{Binding XAxesMonth}\" />\r\n                    </TabItem>\r\n                </TabControl>\r\n            </TabItem>\r\n            \r\n            <!-- Luminosity Tab -->\r\n            <TabItem Header=\"Luminosity\">\r\n                <TabControl>\r\n                    <TabItem Header=\"Day\">\r\n                        <wpf1:CartesianChart Series=\"{Binding LightDaySeries}\" XAxes=\"{Binding XAxesDay}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Week\">\r\n                        <wpf1:CartesianChart Series=\"{Binding LightWeekSeries}\" XAxes=\"{Binding XAxesWeek}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Month\">\r\n                        <wpf1:CartesianChart Series=\"{Binding LightMonthSeries}\" XAxes=\"{Binding XAxesMonth}\" />\r\n                    </TabItem>\r\n                </TabControl>\r\n            </TabItem>\r\n            \r\n            <!-- Pressure Tab -->\r\n            <TabItem Header=\"Air Pressure\">\r\n                <TabControl>\r\n                    <TabItem Header=\"Day\">\r\n                        <wpf1:CartesianChart Series=\"{Binding PressureDaySeries}\" XAxes=\"{Binding XAxesDay}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Week\">\r\n                        <wpf1:CartesianChart Series=\"{Binding PressureWeekSeries}\" XAxes=\"{Binding XAxesWeek}\" />\r\n                    </TabItem>\r\n                    <TabItem Header=\"Month\">\r\n                        <wpf1:CartesianChart Series=\"{Binding PressureMonthSeries}\" XAxes=\"{Binding XAxesMonth}\" />\r\n                    </TabItem>\r\n                </TabControl>\r\n            </TabItem>\r\n        </TabControl>\r\n    </Grid>\r\n</Window>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainWindow.xaml b/MainWindow.xaml
--- a/MainWindow.xaml	(revision 6bde4dc38ef230abcc250aef87cdb33df65fe12f)
+++ b/MainWindow.xaml	(date 1733915384345)
@@ -14,32 +14,53 @@
             <ColumnDefinition Width="85*" />
         </Grid.ColumnDefinitions>
         
-        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,-1300,0">
-            <!-- Battery Text -->
-            <TextBlock FontSize="14" FontWeight="Bold" Foreground="Black" Margin="0,0,10,0" 
-                       VerticalAlignment="Center"
-                       Text="{Binding SelectedBatteryPercentageText, Mode=OneWay}" />
+      <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,-1300,0">
+    <!-- Battery Percentage Text -->
+    <TextBlock FontSize="14" FontWeight="Bold" Foreground="Black" Margin="0,0,10,0" 
+               VerticalAlignment="Center"
+               Text="{Binding SelectedBatteryPercentageText, Mode=OneWay}" />
 
-            <!-- Battery Visual Representation -->
-            <Border Width="100" Height="20" Background="#E0E0E0" CornerRadius="3" BorderBrush="Gray" BorderThickness="1">
-                <Grid>
-                    <!-- Battery Fill -->
-                    <Rectangle x:Name="BatteryLevel" 
-                               Width="{Binding BatteryWidth, Mode=OneWay}" 
-                               Fill="{Binding BatteryColor, Mode=OneWay}" 
-                               HorizontalAlignment="Right" 
-                              />
-                    <!-- Battery Cap -->
-                    <Rectangle Width="8" 
-                               Fill="#555555" 
-                               Height="12" 
-                               HorizontalAlignment="Left" 
-                               VerticalAlignment="Center" 
-                               Margin="1,0,1,0" />
-                </Grid>
-            </Border>
-        </StackPanel>
+    <!-- Battery Visual Representation -->
+    <Border Width="80" Height="30" Background="#F4F4F4" CornerRadius="5" BorderBrush="Gray" BorderThickness="2">
+        <Grid>
+            <!-- Battery Fill with Gradient -->
+            <Rectangle x:Name="BatteryLevel"
+                       Width="{Binding BatteryWidth, Mode=OneWay}" 
+                       HorizontalAlignment="Left" 
+                       RadiusX="3" RadiusY="3">
+                <Rectangle.Fill>
+                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
+                        <GradientStop Color="{Binding BatteryColor, Mode=OneWay}" Offset="0" />
+                        <GradientStop Color="White" Offset="1" />
+                    </LinearGradientBrush>
+                </Rectangle.Fill>
+            </Rectangle>
+
+            <!-- Battery Glow Effect -->
+            <Rectangle Width="{Binding BatteryWidth, Mode=OneWay}"
+                       
+                       HorizontalAlignment="Left"
+                       RadiusX="3" RadiusY="3">
+                <Rectangle.Fill>
+                    <RadialGradientBrush GradientOrigin="0.5,0.5" RadiusX="1.5" RadiusY="1.5">
+                        <GradientStop Color="{Binding BatteryColor, Mode=OneWay}" Offset="0.5" />
+                        <GradientStop Color="Transparent" Offset="1" />
+                    </RadialGradientBrush>
+                </Rectangle.Fill>
+            </Rectangle>
+
+            <!-- Battery Cap -->
+            <Rectangle Width="8" 
+                       Fill="#555555" 
+                       Height="14" 
+                       HorizontalAlignment="Right" 
+                       VerticalAlignment="Center" 
+                       Margin="2,0,2,0" />
+        </Grid>
+    </Border>
+</StackPanel>
 
+
         
         <!-- Current Location Placeholder -->
         <StackPanel Grid.Row="0" Grid.Column="1" Grid.RowSpan="2" x:Name="CurrentLocationBlock"/>
@@ -59,12 +80,40 @@
                 <Run Text="Current Humidity: " />
                 <Run Text="{Binding CurrentHumidity}" />
             </TextBlock>
-            <TextBlock FontSize = "16" FontWeight="Bold">
-                <Run Text="{Binding SelectedBatteryPercentageText,  Mode=OneWay}" />
-                </TextBlock>
         </StackPanel>
-     
-        
+
+        <!-- ~1~ Temperature and Humidity Info @1@ -->
+        <!-- <StackPanel Grid.Row="1" Grid.Column="1"> -->
+        <!--     <TextBlock> -->
+        <!--         <Run Text="Current Temperature: " /> -->
+        <!--         <Run Text="{Binding CurrentTemperature}" /> -->
+        <!--     </TextBlock> -->
+        <!--     <TextBlock> -->
+        <!--         <Run Text="Current Humidity: " /> -->
+        <!--         <Run Text="{Binding CurrentHumidity}" /> -->
+        <!--     </TextBlock> -->
+        <!--     <TextBlock FontSize = "16" FontWeight="Bold"> -->
+        <!--         <Run Text="{Binding SelectedBatteryPercentageText,  Mode=OneWay}" /> -->
+        <!--         </TextBlock> -->
+        <!--      -->
+        <!--      -->
+        <!--      ~1~ Battery Visual Representation @1@ -->
+        <!--     <Grid Width="150" Height="40" Background="LightGray" Margin="5"> -->
+        <!--         ~1~ Battery Bar @1@ -->
+        <!--         <Rectangle x:Name="BatteryLevel"  -->
+        <!--                    Width="{Binding BatteryWidth, Mode=OneWay}"  -->
+        <!--                    Fill="{Binding BatteryColor, Mode=OneWay}"  -->
+        <!--                    HorizontalAlignment="Left"  -->
+        <!--                    Height="40" /> -->
+        <!--         ~1~ Battery Cap @1@ -->
+        <!--         <Rectangle Width="15"  -->
+        <!--                    HorizontalAlignment="Right"  -->
+        <!--                    Fill="Black"  -->
+        <!--                    Height="20"  -->
+        <!--                    VerticalAlignment="Center" /> -->
+        <!--     </Grid> -->
+        <!-- </StackPanel> -->
+
         <!-- TabControl for Charts -->
         <TabControl Grid.Row="2" Grid.Column="1">
             <!-- Temperature Tab -->
Index: MainWindow.xaml.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Linq;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Media;\r\nusing LiveCharts;\r\nusing LiveChartsCore;\r\nusing LiveChartsCore.SkiaSharpView;\r\nusing LiveChartsCore.SkiaSharpView.Painting;\r\nusing SkiaSharp;\r\nusing sql_fetcher;\r\nusing Backend;\r\nusing enums;\r\n\r\nnamespace Weather_App\r\n{\r\n    public partial class MainWindow : Window, INotifyPropertyChanged\r\n    {\r\n        private readonly int DatapointsPerHour = 1; // Placeholder\r\n        private static readonly DataAccess DataAccess = new DataAccess();\r\n\r\n        // Graph Properties\r\n        public List<ISeries> TemperatureDaySeries { get; private set; }\r\n        public List<ISeries> HumidityDaySeries { get; private set; }\r\n        public List<ISeries> LightDaySeries { get; set; }\r\n        public List<ISeries> PressureDaySeries { get; set; }\r\n        public List<ISeries> LuminosityDaySeries { get; set; }\r\n\r\n        public List<ISeries> TemperatureWeekSeries { get; private set; }\r\n        public List<ISeries> HumidityWeekSeries { get; private set; }\r\n        public List<ISeries> LightWeekSeries { get; set; }\r\n        public List<ISeries> PressureWeekSeries { get; set; }\r\n        public List<ISeries> LuminosityWeekSeries { get; set; }\r\n\r\n        public List<ISeries> TemperatureMonthSeries { get; private set; }\r\n        public List<ISeries> HumidityMonthSeries { get; private set; }\r\n        public List<ISeries> LightMonthSeries { get; set; }\r\n        public List<ISeries> PressureMonthSeries { get; set; }\r\n        public List<ISeries> LuminosityMonthSeries { get; set; }\r\n\r\n        public List<Axis> XAxesDay { get; set; }\r\n        public List<Axis> XAxesWeek { get; set; }\r\n        public List<Axis> XAxesMonth { get; set; }\r\n\r\n        // Data\r\n        public string CurrentDay { get; set; }\r\n        public DateTime[] Last24Hours { get; private set; }\r\n        public DateTime[] Last7Days { get; private set; }\r\n        public DateTime[] Last30Days { get; private set; }\r\n        public double CurrentTemperature { get; set; }\r\n        public double CurrentHumidity { get; set; }\r\n        public double CurrentLight { get; set; }\r\n        public double CurrentPressure { get; set; }\r\n\r\n\r\n        public double CurrentSignalToNoiseRatio { get; set; }\r\n        public double CurrentModelId { get; set; }\r\n        public double CurrentBatteryVoltage { get; set; }\r\n        \r\n        public double CurrentBatteryPercentage { get; set; }\r\n\r\n        public List<string> CurrentLocations { get; set; }\r\n        public List<Button> LocationButtons { get; private set; }\r\n        public Dictionary<string, Dictionary<FrontendReadyData, List<double>>> graphData { get; set; }\r\n        public event PropertyChangedEventHandler? PropertyChanged;\r\n        \r\n        private double _selectedBatteryPercentage;\r\n        \r\n        private double _batteryWidth;\r\n        public double BatteryWidth\r\n        {\r\n            get => _batteryWidth;\r\n            set\r\n            {\r\n                _batteryWidth = value;\r\n                RaisePropertyChanged(nameof(BatteryWidth));\r\n            }\r\n        }\r\n        \r\n        private Brush _batteryColor = Brushes.Green;\r\n        public Brush BatteryColor\r\n        {\r\n            get => _batteryColor;\r\n            set\r\n            {\r\n                _batteryColor = value;\r\n                RaisePropertyChanged(nameof(BatteryColor));\r\n            }\r\n        }\r\n\r\n// Helper Method to Update Color\r\n        private void UpdateBatteryColor(double percentage)\r\n        {\r\n            if (percentage > 75)\r\n                BatteryColor = Brushes.Green;\r\n            else if (percentage > 50)\r\n                BatteryColor = Brushes.Yellow;\r\n            else if (percentage > 25)\r\n                BatteryColor = Brushes.Orange;\r\n            else\r\n                BatteryColor = Brushes.Red;\r\n        }\r\n\r\n        public double SelectedBatteryPercentage\r\n        {\r\n            get => _selectedBatteryPercentage;\r\n            set\r\n            {\r\n               \r\n                    _selectedBatteryPercentage = value;\r\n                    RaisePropertyChanged(nameof(SelectedBatteryPercentage));\r\n                    RaisePropertyChanged(nameof(SelectedBatteryPercentageText));\r\n                    \r\n                    BatteryWidth = (_selectedBatteryPercentage / 100) * 100; // Max width of 80\r\n                    UpdateBatteryColor(_selectedBatteryPercentage);\r\n            }\r\n        }\r\n\r\n        public string SelectedBatteryPercentageText => $\"{SelectedBatteryPercentage:F2}%\";\r\n        \r\n    \r\n\r\n\r\n    public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            DataContext = this;\r\n            SelectedBatteryPercentage = 50;\r\n\r\n            // Initialize data\r\n            CurrentDay = DateTime.Now.DayOfWeek.ToString();\r\n            Last24Hours = Enumerable.Range(0, 24).Select(i => DateTime.Now.AddHours(-i)).Reverse().ToArray();\r\n            Last7Days = Enumerable.Range(0, 7).Select(i => DateTime.Now.AddDays(-i)).Reverse().ToArray();\r\n            Last30Days = Enumerable.Range(0, 30).Select(i => DateTime.Now.AddDays(-i)).Reverse().ToArray();\r\n            LocationButtons = new List<Button>();\r\n            CurrentLocations = new List<string>();\r\n            // CurrentLocations.Add(Locations.Wierden);\r\n\r\n            TemperatureDaySeries = new List<ISeries>();\r\n            HumidityDaySeries = new List<ISeries>();\r\n            LightDaySeries = new List<ISeries>();\r\n            PressureDaySeries = new List<ISeries>();\r\n\r\n            TemperatureWeekSeries = new List<ISeries>();\r\n            HumidityWeekSeries = new List<ISeries>();\r\n            LightWeekSeries = new List<ISeries>();\r\n            PressureWeekSeries = new List<ISeries>();\r\n\r\n            TemperatureMonthSeries = new List<ISeries>();\r\n            HumidityMonthSeries = new List<ISeries>();\r\n            LightMonthSeries = new List<ISeries>();\r\n            PressureMonthSeries = new List<ISeries>();\r\n\r\n            GraphData graphDataObject = new GraphData();\r\n\r\n            graphData = new Dictionary<string, Dictionary<FrontendReadyData, List<double>>>();\r\n            foreach (string location in Devices.GetDevices())\r\n            {\r\n                graphData[location] = graphDataObject.FetchGraphData(location);\r\n            }\r\n\r\n            RefreshData();\r\n            \r\n\r\n            // Initialize axes\r\n            XAxesDay = new List<Axis>\r\n            {\r\n                new Axis\r\n                {\r\n                    Labels = Last24Hours.Select(x => x.ToString(\"HH:mm\")).ToArray(),\r\n                    Name = \"Time (HH:MM)\"\r\n                }\r\n            };\r\n\r\n            XAxesWeek = new List<Axis>\r\n            {\r\n                new Axis\r\n                {\r\n                    Labels = Last7Days.Select(x => x.ToString(\"dd/MM\")).ToArray(),\r\n                    Name = \"Date (DD/MM)\"\r\n                }\r\n            };\r\n\r\n            XAxesMonth = new List<Axis>\r\n            {\r\n                new Axis\r\n                {\r\n                    Labels = Last30Days.Select(x => x.ToString(\"dd/MM\")).ToArray(),\r\n                    Name = \"Date (DD/MM)\"\r\n                }\r\n            };\r\n\r\n            // Create location buttons\r\n            // Create location buttons\r\n            foreach (string location in Devices.GetDevices())\r\n            {\r\n                var current_location = location;\r\n                Button button = new Button\r\n                {\r\n                    Content = current_location,\r\n                    Width = Double.NaN,\r\n                    Height = 50,\r\n                };\r\n                button.Click += (sender, args) =>\r\n                {\r\n                    if (CurrentLocations.Contains(current_location))\r\n                    {\r\n                        CurrentLocations.Remove(current_location);\r\n                        button.Background = Brushes.LightGray;\r\n                    }\r\n                    else\r\n                    {\r\n                        CurrentLocations.Add(current_location);\r\n                        button.Background = Brushes.LightBlue;\r\n                    }\r\n                    RefreshData();\r\n\r\n                    CurrentLocationBlock.Children.Clear();\r\n                    foreach(string location in CurrentLocations)\r\n                    {\r\n                        TextBox tb = new TextBox\r\n                        {\r\n                            Text =\r\n                                $\"Current temperature in {location} is: {graphData[current_location][FrontendReadyData.CurrentTemperature].FirstOrDefault()} °C\\n\" +\r\n                                $\"Current humidity in {location} is: {graphData[current_location][FrontendReadyData.CurrentHumidity].FirstOrDefault()} %\\n\" +\r\n                                $\"Current luminosity in {location} is: {graphData[current_location][FrontendReadyData.CurrentLight].FirstOrDefault()} %\\n\" +\r\n                                $\"Current pressure in {location} is: {graphData[current_location][FrontendReadyData.CurrentPressure].FirstOrDefault()} Pa\\n\"\r\n                        };\r\n                        CurrentLocationBlock.Children.Add(tb);\r\n                    }\r\n                };\r\n                \r\n                MenuItem batteryStatus = new MenuItem();\r\n                batteryStatus.Header = \"Battery Status\";\r\n                batteryStatus.Click += (sender, args) =>\r\n                {\r\n                    if (graphData[current_location].ContainsKey(FrontendReadyData.BatteryPercentage))\r\n                    {\r\n                        SelectedBatteryPercentage = graphData[current_location][FrontendReadyData.BatteryPercentage].FirstOrDefault();\r\n                    }\r\n                    else\r\n                    {\r\n                        SelectedBatteryPercentage = 0; // Default value\r\n                    }\r\n\r\n                    Console.WriteLine($\"This is the battery %: {SelectedBatteryPercentage}\");\r\n                    MessageBox.Show($\"Battery Percentage for {current_location}: {SelectedBatteryPercentage:F2}%\", \"Battery Percentage\", MessageBoxButton.OK, MessageBoxImage.Information);\r\n                };\r\n                \r\n\r\n                MenuItem snr = new MenuItem();\r\n                snr.Header = \"Signal to Noise Ratio\";\r\n                snr.Click += (sender, args) =>\r\n                {\r\n                    MessageBox.Show(\"Signal to Noise Ratio: \" +\r\n                                    graphData[current_location][FrontendReadyData.SignalToNoiseRatio].FirstOrDefault());\r\n                };\r\n\r\n                ContextMenu contextMenu = new ContextMenu();\r\n                contextMenu.Items.Add(batteryStatus);\r\n                contextMenu.Items.Add(snr);\r\n\r\n                button.MouseRightButtonDown += (sender, args) =>\r\n                {\r\n                    contextMenu.PlacementTarget = button;\r\n                    contextMenu.IsOpen = true;\r\n                };\r\n                LocationButtons.Add(button);\r\n                LocationStackPanel.Children.Add(button);\r\n            }\r\n        }\r\n        \r\n    \r\n        protected void RaisePropertyChanged(string propertyName)\r\n        {\r\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\r\n        }\r\n        \r\n        void RefreshData()\r\n        {\r\n            CurrentTemperature = 0;\r\n            CurrentHumidity = 0;\r\n            CurrentLight = 0;\r\n            CurrentPressure = 0;\r\n\r\n            CurrentBatteryPercentage = 0;\r\n            SelectedBatteryPercentage = 0;\r\n            CurrentSignalToNoiseRatio = 0;\r\n            CurrentModelId = 0;\r\n            CurrentBatteryVoltage = 0;\r\n\r\n            TemperatureDaySeries.Clear();\r\n            HumidityDaySeries.Clear();\r\n            LightDaySeries.Clear();\r\n            PressureDaySeries.Clear();\r\n\r\n            TemperatureWeekSeries.Clear();\r\n            HumidityWeekSeries.Clear();\r\n            LightWeekSeries.Clear();\r\n            PressureWeekSeries.Clear();\r\n\r\n            TemperatureMonthSeries.Clear();\r\n            HumidityMonthSeries.Clear();\r\n            LightMonthSeries.Clear();\r\n            PressureMonthSeries.Clear();\r\n\r\n            // Initialize chart series\r\n            foreach (string location in CurrentLocations)\r\n            {\r\n                CurrentTemperature = graphData[location][FrontendReadyData.CurrentTemperature].FirstOrDefault();\r\n                CurrentHumidity = graphData[location][FrontendReadyData.CurrentHumidity].FirstOrDefault();\r\n                CurrentLight = graphData[location][FrontendReadyData.CurrentLight].FirstOrDefault();\r\n                CurrentPressure = graphData[location][FrontendReadyData.CurrentPressure].FirstOrDefault();\r\n\r\n                CurrentBatteryPercentage = graphData[location][FrontendReadyData.BatteryPercentage].FirstOrDefault();\r\n                CurrentSignalToNoiseRatio = graphData[location][FrontendReadyData.SignalToNoiseRatio].FirstOrDefault();\r\n                CurrentModelId = graphData[location][FrontendReadyData.ModelId].FirstOrDefault();\r\n                CurrentBatteryVoltage = graphData[location][FrontendReadyData.BatteryVoltage].FirstOrDefault();\r\n\r\n                TemperatureDaySeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values = new ChartValues<double>(\r\n                            graphData[location][FrontendReadyData.HourlyDayTemperatureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Temperature {location} (°C)\",\r\n                    });\r\n\r\n                HumidityDaySeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values = new ChartValues<double>(\r\n                            graphData[location][FrontendReadyData.HourlyDayHumidityAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Humidity {location} (%)\",\r\n                    }\r\n                );\r\n\r\n                PressureDaySeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values = new ChartValues<double>(\r\n                            graphData[location][FrontendReadyData.HourlyDayPressureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Pressure {location} (Pa)\",\r\n                    }\r\n                );\r\n\r\n                LightDaySeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values = new ChartValues<double>(\r\n                            graphData[location][FrontendReadyData.HourlyDayLightAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Luminosity {location} (lux)\",\r\n                    }\r\n                );\r\n\r\n                TemperatureWeekSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyWeekTemperatureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Temperature {location} (°C)\",\r\n                    }\r\n                );\r\n\r\n                HumidityWeekSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyWeekHumidityAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Humidity {location} (%)\",\r\n                    }\r\n                );\r\n\r\n                PressureWeekSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyWeekPressureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Pressure {location} (Pa)\",\r\n                    }\r\n                );\r\n\r\n                LightWeekSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyWeekLightAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Luminosity {location} (lux)\",\r\n                    }\r\n                );\r\n\r\n                TemperatureMonthSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(\r\n                                graphData[location][FrontendReadyData.DailyMonthTemperatureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Temperature {location} (°C)\",\r\n                    }\r\n                );\r\n\r\n                HumidityMonthSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyMonthHumidityAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Humidity {location} (%)\",\r\n                    }\r\n                );\r\n\r\n                LightMonthSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyMonthLightAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Luminosity {location} (lux)\",\r\n                    }\r\n                );\r\n\r\n                PressureMonthSeries.Add(\r\n                    new LineSeries<double>\r\n                    {\r\n                        Values =\r\n                            new ChartValues<double>(graphData[location][FrontendReadyData.DailyMonthPressureAverage]),\r\n                        Fill = null,\r\n                        Stroke = new SolidColorPaint(SKColors.Red),\r\n                        GeometrySize = 10,\r\n                        Name = $\"Pressure {location} (Pa)\",\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainWindow.xaml.cs b/MainWindow.xaml.cs
--- a/MainWindow.xaml.cs	(revision 6bde4dc38ef230abcc250aef87cdb33df65fe12f)
+++ b/MainWindow.xaml.cs	(date 1733915143271)
@@ -114,7 +114,7 @@
                     RaisePropertyChanged(nameof(SelectedBatteryPercentage));
                     RaisePropertyChanged(nameof(SelectedBatteryPercentageText));
                     
-                    BatteryWidth = (_selectedBatteryPercentage / 100) * 100; // Max width of 80
+                    BatteryWidth = (_selectedBatteryPercentage * 70) / 100; // Max width of 80
                     UpdateBatteryColor(_selectedBatteryPercentage);
             }
         }
